---
import { Icon } from "astro-icon/components";

interface Props {
  initialMediaSelected?: "video" | "photo";
}

const instanceId = crypto.randomUUID();
const { initialMediaSelected = "photo" } = Astro.props;
const { search } = Astro.params;
---

<form
  id={`searchForm-${instanceId}`}
  role="search"
  autocomplete="off"
  class="flex bg-gray-100 rounded-xl"
>
  <div class="relative group" id={`dropdownContainer-${instanceId}`}>
    <button
      type="button"
      class="flex items-center gap-2 bg-white p-3 m-1 cursor-pointer rounded-xl hover:bg-gray-300 group-hover:bg-gray-100 font-semibold transition-colors"
      id={`dropdownButton-${instanceId}`}
    >
      <Icon
        id={`typeIconPhoto-${instanceId}`}
        class:list={["h-4 w-5", { hidden: initialMediaSelected !== "photo" }]}
        name="photo"
        color="gray"
      />
      <Icon
        id={`typeIconVideo-${instanceId}`}
        class:list={["h-5 w-5", { hidden: initialMediaSelected !== "video" }]}
        name="video"
        color="gray"
      />
      <span id={`selectedType-${instanceId}`} class="w-12 hidden md:block"
        >{initialMediaSelected == "photo" ? "Photos" : "Videos"}</span
      >
      <Icon
        class="h-5 w-5 transition-transform duration-200 rotate-90 group-hover:-rotate-90 group-[.active]:-rotate-90"
        name="arrow"
        color="gray"
      />
    </button>

    <div class="absolute left-0 top-12 w-[8.5rem] px-1 z-10">
      <div
        class="bg-white rounded-2xl opacity-0 -translate-y-4 max-h-0 invisible overflow-hidden transition-all duration-200 shadow-lg p-0.5 group-hover:opacity-100 group-hover:translate-y-3 group-hover:max-h-96 group-hover:visible group-[.active]:opacity-100 group-[.active]:translate-y-3 group-[.active]:max-h-96 group-[.active]:visible"
      >
        <div
          class=`menu-item-${instanceId} flex items-center gap-2 hover:bg-gray-300 p-2 mx-1 mt-1 rounded-xl cursor-pointer font-semibold`
          data-type="Photos"
        >
          <Icon name="photo" class="w-5 h-4" color="gray" />
          Photos
        </div>

        <div
          class=`menu-item-${instanceId} flex items-center gap-2 hover:bg-gray-300 p-2 mx-1 mb-1 rounded-xl cursor-pointer font-semibold`
          data-type="Videos"
        >
          <Icon name="video" class="w-5 h-5" color="gray" />
          Videos
        </div>
      </div>
    </div>
  </div>

  <input
    id=`inputSearch-${instanceId}`
    type="text"
    placeholder="Search for free photos"
    value={search}
    class="w-full placeholder:text-gray-400 placeholder:font-semibold focus:outline-none px-4 bg-transparent font-semibold"
  />

  <button
    class="p-3 m-1 cursor-pointer rounded-xl hover:bg-gray-300 active:bg-gray-300 transition-colors"
    type="submit"
  >
    <Icon class="h-6 w-6" name="search" color="gray" />
  </button>
</form>

<script is:inline define:vars={{ instanceId }}>
  console.log(instanceId);

  const form = document.getElementById(`searchForm-${instanceId}`);
  const inputSearch = document.getElementById(`inputSearch-${instanceId}`);
  const typeIconPhoto = document.getElementById(`typeIconPhoto-${instanceId}`);
  const typeIconVideo = document.getElementById(`typeIconVideo-${instanceId}`);
  const selectedType = document.getElementById(`selectedType-${instanceId}`);
  const dropdownContainer = document.getElementById(
    `dropdownContainer-${instanceId}`,
  );
  const dropdownButton = document.getElementById(
    `dropdownButton-${instanceId}`,
  );

  dropdownButton.addEventListener("click", (e) => {
    e.stopPropagation();
    dropdownContainer.classList.toggle("active");
  });

  document.addEventListener("click", (e) => {
    const target = e.target;

    if (!dropdownContainer.contains(target)) {
      dropdownContainer.classList.remove("active");
    }
  });

  document.querySelectorAll(`.menu-item-${instanceId}`).forEach((item) => {
    item.addEventListener("click", () => {
      dropdownContainer.classList.remove("active");

      const type = item.dataset.type;
      if (type === "Photos") {
        typeIconPhoto.classList.remove("hidden");
        typeIconVideo.classList.add("hidden");
      } else {
        typeIconPhoto.classList.add("hidden");
        typeIconVideo.classList.remove("hidden");
      }

      selectedType.textContent = type;
      inputSearch.placeholder = `Search for free ${type.toLowerCase()}`;
    });
  });

  form.addEventListener("submit", (e) => {
    e.preventDefault();
    const searchQuery = inputSearch.value.trim();

    if (!searchQuery) return;

    const searchType = selectedType.textContent;
    const basePath = searchType === "Videos" ? "/videos/search/" : "/search/";

    window.location.href = `${basePath}${encodeURIComponent(searchQuery)}`;
  });
</script>
